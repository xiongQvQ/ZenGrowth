#!/usr/bin/env python3\n\"\"\"\n测试 Streamlit 数据加载修复\n\"\"\"\n\nimport pandas as pd\nfrom pathlib import Path\nfrom tools.ga4_data_parser import GA4DataParser\nfrom tools.data_storage_manager import DataStorageManager\n\ndef test_streamlit_data_fix():\n    \"\"\"测试 Streamlit 数据加载修复\"\"\"\n    try:\n        print(\"🔧 测试 Streamlit 数据加载修复...\")\n        \n        # 1. 模拟 Streamlit 的数据处理流程\n        data_file = Path(\"data/events_ga4.ndjson\")\n        parser = GA4DataParser()\n        raw_data = parser.parse_ndjson(str(data_file))\n        print(f\"✅ 解析了 {len(raw_data)} 个原始事件\")\n        \n        # 2. 提取事件数据（模拟 main.py 中的逻辑）\n        events_data = parser.extract_events(raw_data)\n        user_data = parser.extract_user_properties(raw_data)\n        session_data = parser.extract_sessions(raw_data)\n        \n        print(f\"事件数据类型: {type(events_data)}\")\n        \n        # 3. 处理事件数据（使用修复后的逻辑）\n        if isinstance(events_data, dict):\n            # 合并所有事件类型的数据\n            all_events_list = []\n            for event_type, event_df in events_data.items():\n                if not event_df.empty:\n                    all_events_list.append(event_df)\n                    print(f\"  添加 {event_type}: {len(event_df)} 个事件\")\n            \n            if all_events_list:\n                combined_events = pd.concat(all_events_list, ignore_index=True)\n                print(f\"✅ 合并了 {len(events_data)} 种事件类型，总计 {len(combined_events)} 个事件\")\n            else:\n                combined_events = pd.DataFrame()\n                print(\"⚠️ 没有找到有效的事件数据\")\n        else:\n            combined_events = events_data\n        \n        # 4. 存储数据（模拟 Streamlit 的存储逻辑）\n        storage_manager = DataStorageManager()\n        storage_manager.store_events(combined_events)\n        storage_manager.store_users(user_data)\n        storage_manager.store_sessions(session_data)\n        \n        # 5. 验证存储的数据\n        stored_events = storage_manager.get_data('events')\n        if stored_events is not None and not stored_events.empty:\n            print(f\"✅ 存储验证成功，事件数: {len(stored_events)}\")\n            print(f\"事件类型: {stored_events['event_name'].unique()[:5]}\")\n            \n            # 6. 测试分析引擎接口\n            from engines.event_analysis_engine import EventAnalysisEngine\n            from engines.retention_analysis_engine import RetentionAnalysisEngine\n            \n            print(\"\\n🧪 测试分析引擎接口...\")\n            \n            # 测试事件分析\n            event_engine = EventAnalysisEngine(storage_manager)\n            event_result = event_engine.analyze_events(stored_events)\n            print(f\"✅ 事件分析成功，结果类型: {type(event_result)}\")\n            print(f\"事件分析状态: {event_result.get('status', 'unknown')}\")\n            \n            # 测试留存分析\n            retention_engine = RetentionAnalysisEngine(storage_manager)\n            retention_result = retention_engine.analyze_retention(stored_events)\n            print(f\"✅ 留存分析成功，结果类型: {type(retention_result)}\")\n            print(f\"留存分析状态: {retention_result.get('status', 'unknown')}\")\n            \n        else:\n            print(\"❌ 存储验证失败，数据为空\")\n            return False\n        \n        print(\"\\n🎉 Streamlit 数据加载修复测试成功！\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ 测试失败: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\nif __name__ == \"__main__\":\n    test_streamlit_data_fix()"