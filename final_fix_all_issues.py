#!/usr/bin/env python3\n\"\"\"\n最终修复所有问题的脚本\n\"\"\"\n\nimport sys\nimport os\nsys.path.append(os.getcwd())\n\ndef main():\n    print(\"🔧 最终修复所有问题...\")\n    \n    try:\n        # 1. 检查数据文件\n        from pathlib import Path\n        data_file = Path(\"data/events_ga4.ndjson\")\n        if not data_file.exists():\n            print(\"❌ 数据文件不存在，生成测试数据...\")\n            os.system(\"python generate_clean_data.py\")\n        else:\n            print(\"✅ 数据文件存在\")\n        \n        # 2. 测试基本导入\n        print(\"📦 测试基本导入...\")\n        from tools.ga4_data_parser import GA4DataParser\n        from tools.data_storage_manager import DataStorageManager\n        import pandas as pd\n        print(\"✅ 基本导入成功\")\n        \n        # 3. 测试数据解析\n        print(\"🔍 测试数据解析...\")\n        parser = GA4DataParser()\n        raw_data = parser.parse_ndjson(str(data_file))\n        print(f\"✅ 解析了 {len(raw_data)} 个事件\")\n        \n        # 4. 测试事件提取和合并\n        print(\"🔄 测试事件提取和合并...\")\n        events_data = parser.extract_events(raw_data)\n        \n        if isinstance(events_data, dict):\n            all_events_list = []\n            for event_type, event_df in events_data.items():\n                if not event_df.empty:\n                    all_events_list.append(event_df)\n            \n            if all_events_list:\n                combined_events = pd.concat(all_events_list, ignore_index=True)\n                print(f\"✅ 合并了 {len(events_data)} 种事件类型，总计 {len(combined_events)} 个事件\")\n            else:\n                combined_events = pd.DataFrame()\n        else:\n            combined_events = events_data\n        \n        # 5. 测试存储\n        print(\"💾 测试数据存储...\")\n        storage_manager = DataStorageManager()\n        storage_manager.store_events(combined_events)\n        \n        stored_events = storage_manager.get_data('events')\n        if stored_events is not None and not stored_events.empty:\n            print(f\"✅ 存储成功，事件数: {len(stored_events)}\")\n        else:\n            print(\"❌ 存储失败\")\n            return False\n        \n        # 6. 测试分析引擎\n        print(\"🧪 测试分析引擎...\")\n        from engines.event_analysis_engine import EventAnalysisEngine\n        from engines.retention_analysis_engine import RetentionAnalysisEngine\n        \n        event_engine = EventAnalysisEngine(storage_manager)\n        event_result = event_engine.analyze_events(stored_events)\n        print(f\"✅ 事件分析: {event_result.get('status', 'unknown')}\")\n        \n        retention_engine = RetentionAnalysisEngine(storage_manager)\n        retention_result = retention_engine.analyze_retention(stored_events)\n        print(f\"✅ 留存分析: {retention_result.get('status', 'unknown')}\")\n        \n        # 7. 测试集成管理器\n        print(\"🔗 测试集成管理器...\")\n        from system.integration_manager import IntegrationManager, WorkflowConfig\n        \n        config = WorkflowConfig(\n            enable_parallel_processing=False,\n            max_workers=2,\n            timeout_minutes=5,\n            enable_caching=True,\n            auto_cleanup=True\n        )\n        \n        integration_manager = IntegrationManager(config)\n        \n        # 测试单个分析\n        single_result = integration_manager._execute_single_analysis('event_analysis')\n        print(f\"✅ 集成管理器单个分析: {single_result.status}\")\n        \n        print(\"\\n🎉 所有测试通过！应用应该可以正常工作了。\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ 测试失败: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    if success:\n        print(\"\\n🚀 现在可以启动应用了:\")\n        print(\"   python start_app_simple.py\")\n        print(\"   或者\")\n        print(\"   streamlit run main.py\")\n    else:\n        print(\"\\n❌ 修复失败，请检查错误信息\")"