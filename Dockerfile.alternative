# Alternative Dockerfile with Chinese mirrors for better connectivity
# Multi-stage Dockerfile for User Behavior Analytics Platform

# ================================
# Stage 1: Base Dependencies with Chinese Mirrors
# ================================
FROM python:3.11-slim AS base

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Use Tsinghua University mirrors for better connectivity in China
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list

# Install system dependencies with retry logic and Chinese mirrors
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && \
    for i in 1 2 3; do \
        apt-get update && \
        apt-get install -y --no-install-recommends \
            --fix-missing \
            build-essential \
            curl \
            git \
            ca-certificates \
        && break || { \
            echo "Attempt $i failed, retrying in 10 seconds..."; \
            sleep 10; \
            apt-get clean; \
            rm -rf /var/lib/apt/lists/*; \
        } \
    done && \
    rm -rf /var/lib/apt/lists/*

# ================================
# Stage 2: Dependencies Installation
# ================================
FROM base AS dependencies

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies with Chinese PyPI mirror and timeout settings
RUN pip install --upgrade pip setuptools wheel \
        --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ \
        --trusted-host pypi.tuna.tsinghua.edu.cn \
        --timeout 300 \
        --retries 3 && \
    pip install -r requirements.txt \
        --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ \
        --trusted-host pypi.tuna.tsinghua.edu.cn \
        --timeout 300 \
        --retries 3

# ================================
# Stage 3: Application Setup
# ================================
FROM base AS application

# Copy virtual environment from dependencies stage
COPY --from=dependencies /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN groupadd -r analytics && \
    useradd -r -g analytics -u 1000 -m -s /bin/bash analytics

# Create application directories with proper permissions
RUN mkdir -p /app/data/uploads \
             /app/data/processed \
             /app/reports \
             /app/logs \
             /app/config && \
    chown -R analytics:analytics /app

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=analytics:analytics . .

# Copy entry point and utility scripts
COPY --chown=analytics:analytics entrypoint.sh /app/entrypoint.sh
COPY --chown=analytics:analytics healthcheck.py /app/healthcheck.py
COPY --chown=analytics:analytics config_validator.py /app/config_validator.py
COPY --chown=analytics:analytics startup_monitor.py /app/startup_monitor.py
COPY --chown=analytics:analytics load_env.py /app/load_env.py

# Copy .env.example as template
COPY --chown=analytics:analytics .env.example /app/.env.example

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.py /app/config_validator.py /app/startup_monitor.py /app/load_env.py

# ================================
# Stage 4: Production Image
# ================================
FROM python:3.11-slim AS production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH"

# Use Chinese mirrors for runtime dependencies
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list

# Install minimal runtime dependencies with retry logic
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && \
    for i in 1 2 3; do \
        apt-get update && \
        apt-get install -y --no-install-recommends \
            --fix-missing \
            curl \
            ca-certificates \
        && break || { \
            echo "Attempt $i failed, retrying in 10 seconds..."; \
            sleep 10; \
            apt-get clean; \
            rm -rf /var/lib/apt/lists/*; \
        } \
    done && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Create non-root user
RUN groupadd -r analytics && \
    useradd -r -g analytics -u 1000 -m -s /bin/bash analytics

# Copy virtual environment from dependencies stage
COPY --from=dependencies /opt/venv /opt/venv

# Create application directories
RUN mkdir -p /app/data/uploads \
             /app/data/processed \
             /app/reports \
             /app/logs \
             /app/config && \
    chown -R analytics:analytics /app

# Set working directory
WORKDIR /app

# Copy application code and entry point script
COPY --from=application --chown=analytics:analytics /app .

# Switch to non-root user
USER analytics

# Expose port
EXPOSE 8501

# Health check using our enhanced health check script
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD python3 /app/healthcheck.py || exit 1

# Set entry point
ENTRYPOINT ["/app/entrypoint.sh"]

